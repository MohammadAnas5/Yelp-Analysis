Objective:

For this project, specifically, we are going to be playing the role of a real-world data scientist using SQL to both answer specific questions for an organization and make inferences based on our discoveries. 

We will be using a dataset from a US-based organization called Yelp, which provides a platform for users to provide reviews and rate their interactions with a variety of organizations – businesses, restaurants, health clubs, hospitals, local governmental offices, charitable organizations, etc. Yelp has made a portion of this data available for personal, educational, and academic purposes.

This is a 2-parts project. In the first part,  we answer a series of questions that will help to profile and understand the data just like a data scientist would. 
For this first part of the assignment,  we will be assessed both on the correctness of our findings, as well as the code  we used to arrive at our answer.

In the second part of the assignment,  we are asked to come up with our own inferences and analysis of the data for a particular question  we want to answer

Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
•	Attribute table = 10000
SELECT Count(*) FROM attribute;

•	Business table = 10000
SELECT Count(*) FROM business;
•	
•	Category table = 10000
SELECT Count(*) FROM category;

Checkin table = 10000
SELECT Count(*) FROM checkin;
•	
•	elite_years table = 10000
SELECT Count(*) FROM elite_years;

friend table = 10000
SELECT Count(*) FROM friend;

•	hours table = 10000
SELECT Count(*) FROM hours;

•	photo table = 10000
SELECT Count(*) FROM photo;

•	review table = 10000
SELECT Count(*) FROM review;

•	tip table = 10000
SELECT Count(*) FROM tip;

•	user table = 10000
SELECT Count(*) FROM user;

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
Business (id) = 10000
SELECT Count(distinct id) FROM business;

•	Hours (business_id) = 1562
SELECT Count(distinct business_id) FROM hours;

•	Category (business_id) = 2643
SELECT Count(distinct business_id) FROM category;

•	Attribute (business_id) = 1115
SELECT Count(distinct business_id) FROM attribute;

•	Checkin (business_id) = 493
SELECT Count(distinct business_id) FROM checkin;

•	Photo (id) = 10000 | (business_id) = 6493
SELECT Count(distinct id) FROM photo;
SELECT Count(distinct business_id) FROM photo;

•	Tip (user_id) =537 | (business_id) = 3979
SELECT Count(distinct user_id) FROM tip;
SELECT Count(distinct business_id) FROM tip;
•	User (id) = 10000
SELECT Count(distinct id) FROM user;
•	
•	Friend (user_id) = 11
SELECT Count(distinct user_id) FROM friend;

•	Elite_years (user_id) = 2780
SELECT Count(distinct user_id) FROM elite_years;

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."
Answer: No
SELECT *
FROM user
WHERE id IS NULL OR
 name IS NULL OR
 review_count IS NULL OR
 yelping_since IS NULL OR
 useful IS NULL OR
 cool IS NULL OR
 fans IS NULL OR
 average_stars IS NULL OR
 compliment_hot IS NULL OR
 compliment_more IS NULL OR
 compliment_profile IS NULL OR
 compliment_cute IS NULL OR
 compliment_list IS NULL OR
 compliment_note IS NULL OR
 compliment_plain IS NULL OR
 compliment_cool IS NULL OR
compliment_funny IS NULL OR
compliment_writer IS NULL OR
compliment_photos IS NULL;

4.For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

Table: Review, Column: Stars
min: 1     
max: 5      
avg: 3.7082

SELECT min(stars) FROM review;
SELECT max(stars) FROM review;
SELECT avg(stars) FROM review;

Table: Business, Column: Stars

min: 1      
max: 5      
avg: 3.6549

SELECT min(stars) FROM business;
SELECT max(stars) FROM business;
SELECT avg(stars) FROM business;

Table: Tip, Column: Likes

min: 0      
max: 2      
avg: 0.0144

SELECT min(likes) FROM tip;
SELECT max(likes) FROM tip;
SELECT avg(likes) FROM tip;

Table: Checkin, Column: Count

min: 1      
max: 53     
avg: 1.9414

SELECT min(count) FROM checkin;
SELECT max(count) FROM checkin;
SELECT avg(count) FROM checkin;

Table: User, Column: Review_count

min: 0      
max: 2000   
avg: 24.2995

SELECT min(review_count) FROM user;
SELECT max(review_count) FROM user;
SELECT avg(review_count) FROM user;

5. List the cities with the most reviews in descending order:
SELECT city, sum(review_count) AS total_review
FROM business
GROUP BY city
ORDER BY total_review DESC;

+-----------------+--------------+
| city            | total_review |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |

6.Find the distribution of star ratings to the business in the following cities:
i. Avon
SELECT  stars, sum(review_count) AS stars_rating_count
FROM business
WHERE city = "Avon"
GROUP BY stars;

  stars | stars_rating_count |
+-------+--------------------+
|   1.5 |                 10 |
|   2.5 |                  6 |
|   3.5 |                 88 |
|   4.0 |                 21 |
|   4.5 |                 31 |
|   5.0 |                  3 |

ii. Beachwood

SELECT stars, sum(review_count) AS stars_rating_count
FROM business
WHERE city = "Beachwood"
GROUP BY stars;

  stars | stars_rating_count 
+-------+--------------------+
|   2.0 |                  8 |
|   2.5 |                  3 |
|   3.0 |                 11 |
|   3.5 |                  6 |
|   4.0 |                 69 |
|   4.5 |                 17 |
|   5.0 |                 23 | 


Find the top 3 users based on their total number of reviews:

SELECT  name, sum(review_count) AS review
FROM user
GROUP BY id
ORDER BY review DESC
LIMIT 3;

  name   | review |
+--------+--------+
| Gerald |   2000 |
| Sara   |   1629 |
| Yuri   |   1339 | 

8.Does posing more reviews correlate with more fans?

Ans: based on the results I can conclude that posing more reviews does not correlate with more fans, due to results below we can see Gerald has a total of 2000 reviews but only 253 fans while Mimi has 968 reviews and 497 fans.

name      | total_review | fans | avg_review_per_fan |
+-----------+--------------+------+--------------------+
| Gerald    |         2000 |  253 |                  7 |
| Sara      |         1629 |   50 |                 32 |
| Yuri      |         1339 |   76 |                 17 |
| .Hon      |         1246 |  101 |                 12 |
| William   |         1215 |  126 |                  9 |
| Harald    |         1153 |  311 |                  3 |
| eric      |         1116 |   16 |                 69 |
| Roanna    |         1039 |  104 |                  9 |
| Mimi      |          968 |  497 |                  1 |
| Christine |          930 |  173 |                  5 |

9. Are there more reviews with the word "love" or with the word "hate" in them?

Ans: There is more reviews with the word love than hate.

SELECT  feelings, 
COUNT (*) AS total_count
FROM (SELECT 
CASE  WHEN text LIKE "%love%" THEN "love"
            WHEN text LIKE "%hate%" THEN "hate"
            ELSE "Others"
            END feelings
FROM review)
GROUP BY feelings
ORDER BY total_count DESC;

  feelings | total_count |
+----------+-------------+
| Others   |        8042 |
| love     |        1780 |
| hate     |         178 |

10. Find the top 10 users with the most fans:

SELECT name, sum(fans) AS total_fans
FROM user
GROUP BY id
ORDER BY total_fans DESC
LIMIT 10;

  name      | total_fans |
+-----------+------------+
| Amy       |        503 |
| Mimi      |        497 |
| Harald    |        311 |
| Gerald    |        253 |
| Christine |        173 |
| Lisa      |        159 |
| Cat       |        133 |
| William   |        126 |
| Fran      |        124 |
| Lissa     |        120 |


Part 2: Inferences and Analysis

1. Pick one city and category of  wer choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include  wer code.

Ans i: The city I choose is Las Vegas and the Category is Shopping. The two group I analyze does have a difference with the 2-3 stars having distribution hours of 13 while the 3-4 stars having a distribution hours of 12.

Ans ii: Yes, the two groups have different number of reviews.

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END star_rank,
        city, 
        c.category,
        count(distinct business.id) AS company_count,
        count(h.hours) AS working_days,
        sum(review_count) AS total_review
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas" AND c.category = "Shopping"
GROUP BY star_rank;

Ans iii. Yes, the stores that have 2-3 stars postal zip code is 89121 while stores that have 4-5 stars are different

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END star_rank,
        address,
        neighborhood,
        city, 
        postal_code
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas" AND c.category = "Shopping"
ORDER BY star_rank

2. Group business based on the ones that are open and the ones that are closed. What differences can  we find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code  we used to arrive at  wer answer.

Ans i. Difference 1: Total review is higher in still open then closed businesses.
Ans ii. Difference 2: The average stars given are very closed to each other with Still Open 3.68, while Closed is 3.52. 
SELECT  CASE    WHEN is_open = 1 THEN "STILL OPEN"
                WHEN is_open = 0 THEN "CLOSED"
                END status, 
        count(distinct id) AS num_company,
        sum(review_count) AS total_review,
        round(avg(review_count),2) AS avg_review,
        round(avg(stars),2) AS avg_stars
FROM business
GROUP BY is_open
ORDER BY status DESC;

3. For this last part of  wer analysis,  we are going to choose the type of analysis  we want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Indicate the type of analysis  we chose to do:
Ans i. The analysis is to find out the most successful businesses based on the business category and reviews.

Write 1-2 brief paragraphs on the type of data  we will need for  wer analysis and why  we chose that data:
Ans ii. The data needed to complete the analysis will be stars, reviews, and id. To complete the analysis I will need to count the number of companies within each category, the average stars given by the consumers to see how they perform, and the total reviews are given. Based on the results  we will be able to see that food and bar category tends to be more successful in the perspective of category and reviews.  

The output of  wer finished dataset:
Ans iii. 

+------------------------+---------------+-----------+---------------+
| category               | num_companies | avg_stars | total_reviews |
+------------------------+---------------+-----------+---------------+
| Local Services         |            12 |      4.21 |           100 |
| Active Life            |            10 |      4.15 |           131 |
| Health & Medical       |            17 |      4.09 |           203 |
| Home Services          |            16 |       4.0 |            94 |
| Shopping               |            30 |      3.98 |           977 |
| Beauty & Spas          |            13 |      3.88 |           119 |
| American (Traditional) |            11 |      3.82 |          1128 |
| Food                   |            23 |      3.78 |          1781 |
| Bars                   |            17 |       3.5 |          1322 |
+------------------------+---------------+-----------+---------------+

Provide the SQL code  we used to create  wer final dataset:

Ans iv. SELECT  category, 
                count(distinct id) AS num_companies, 
                round(avg(stars),2) AS avg_stars,
                sum(review_count) total_reviews
FROM business
JOIN category ON business.id = category.business_id
GROUP BY category
HAVING avg_stars >= 3.5 AND num_companies >= 10
ORDER BY avg_stars DESC;








